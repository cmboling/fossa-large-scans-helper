name: Full EPEL SRPM Scan + FOSSA Analyze

on:
  workflow_dispatch:

env:
  FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

jobs:
  scan-srpms:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rpm:
          - crun-wasm-0.0-1.el8.src.rpm
          - clibs-list-0.4.1-1.el8.src.rpm
          - composer-generators-0.1.2-1.el8.src.rpm
          - create-fake-rpm-4-1.el8.src.rpm
          - copr-selinux-1.54-1.el8.src.rpm

    name: Scan ${{ matrix.rpm }}
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm2cpio cpio curl zip unzip

      - name: Download RPM
        run: |
          mkdir -p srpms
          cd srpms
          curl -O "https://dl.fedoraproject.org/pub/epel/8/Everything/SRPMS/Packages/c/${{ matrix.rpm }}"

      - name: Skip if over 1MB
        id: check
        run: |
          cd srpms
          size_bytes=$(stat -c%s "${{ matrix.rpm }}")
          if [ "$size_bytes" -gt $((1 * 1024 * 1024)) ]; then
            echo "has_results=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "has_results=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract and generate logical fossa-deps
        if: steps.check.outputs.has_results == 'true'
        run: |
          mkdir -p vendor
          rpm="${{ matrix.rpm }}"
          rpm_basename=$(basename "$rpm" .src.rpm)
          extract_dir="vendor/${rpm_basename}"
          mkdir -p "$extract_dir"

          # Download and extract
          curl -O "https://dl.fedoraproject.org/pub/epel/8/Everything/SRPMS/Packages/c/$rpm"
          rpm2cpio "$rpm" | cpio -idmv

          # Move extracted contents into vendor/<rpm>
          find . -mindepth 1 -maxdepth 1 ! -name vendor -exec mv {} "$extract_dir"/ \;

          # Generate vendored-deps entries from logical subdirs
          mkdir -p fossa-partial
          deps_file="fossa-partial/deps-${rpm_basename}.yml"
          touch "$deps_file"

          version=$(echo "$rpm_basename" | sed -E 's/^[^-]+-//')
          name=$(echo "$rpm_basename" | sed -E "s/-$version$//")
          timestamp=$(date +%s)
          i=1

          # Logical subdirectories under 1MB
          find "$extract_dir" -type d ! -path "$extract_dir" | while read dir; do
            size=$(du -sb "$dir" | cut -f1)
            if [ "$size" -le $((1 * 1024 * 1024)) ]; then
              rel_path=$(echo "$dir" | sed 's|^vendor/||')
              frag_name="${name}-fragment-${i}-${timestamp}"
              echo "- name: $frag_name" >> "$deps_file"
              echo "  path: vendor/$rel_path" >> "$deps_file"
              echo "  version: $version" >> "$deps_file"
              i=$((i + 1))
            fi
          done

          # Include whole root dir if it's under 1MB
          root_size=$(du -sb "$extract_dir" | cut -f1)
          if [ "$root_size" -le $((1 * 1024 * 1024)) ]; then
            frag_name="${name}-fragment-${i}-${timestamp}"
            echo "- name: $frag_name" >> "$deps_file"
            echo "  path: vendor/${rpm_basename}" >> "$deps_file"
            echo "  version: $version" >> "$deps_file"
          fi

      - name: Zip deps fragment
        if: steps.check.outputs.has_results == 'true'
        run: |
          zip -j fossa-deps-fragment-${{ matrix.rpm }}.zip fossa-partial/*.yml

      - name: Upload zipped artifact
        if: steps.check.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fossa-fragment-${{ matrix.rpm }}
          path: fossa-deps-fragment-${{ matrix.rpm }}.zip

      - name: Upload vendor directory
        if: steps.check.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: vendor-${{ matrix.rpm }}
          path: vendor

  merge-and-analyze:
    needs: scan-srpms
    runs-on: ubuntu-latest
    name: Merge + Analyze

    steps:
      - name: Download all zipped deps
        uses: actions/download-artifact@v4
        with:
          path: fragments

      - name: Extract fossa-deps fragments
        run: |
          mkdir merged-deps
          for zip in fragments/**/fossa-deps-fragment-*.zip; do
            unzip -o "$zip" -d merged-deps
          done

      - name: Download all vendor directories
        uses: actions/download-artifact@v4
        with:
          path: vendor

      - name: Merge vendor trees
        run: |
          mkdir -p vendor
          find vendor -mindepth 2 -maxdepth 3 -type f,d | while read path; do
            dest="vendor/$(basename $(dirname "$path"))"
            mkdir -p "$dest"
            cp -r "$path" "$dest/" || true
          done

      - name: Combine into final fossa-deps.yml
        run: |
          echo "vendored-dependencies:" > fossa-deps.yml
          for file in merged-deps/*.yml; do
            cat "$file" | sed 's/^/  /' >> fossa-deps.yml
          done
          echo "--- Final fossa-deps.yml ---"
          cat fossa-deps.yml

      - name: Install FOSSA CLI
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa --version
          ls -l
          tree

      - name: Run FOSSA Analyze
        run: |
          fossa analyze --debug

      - name: Upload final fossa-deps.yml
        uses: actions/upload-artifact@v4
        with:
          name: final-fossa-deps
          path: fossa-deps.yml
