name: Parallel FOSSA Analysis for Large RPMs

on:
  workflow_dispatch:
    inputs:
      rpm:
        description: 'RPM name (e.g. chromium-133.0.6943.141-1.el8.src.rpm)'
        required: true

env:
  FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

jobs:
  extract-and-split:
    runs-on: ubuntu-latest
    name: Extract and Split RPM
    outputs:
      fragments-json: ${{ steps.set.outputs.fragments }}
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm curl tar jq

      - name: Download and extract RPM using rpm2archive
        run: |
          mkdir -p workspace/vendor
          rpm="${{ github.event.inputs.rpm }}"
          rpm_basename=$(basename "$rpm" .src.rpm)
          extract_dir="workspace/vendor/${rpm_basename}"
          mkdir -p "$extract_dir"
          cd workspace

          echo "ðŸ“¦ Downloading $rpm"
          curl -O "https://dl.fedoraproject.org/pub/epel/8/Everything/SRPMS/Packages/c/$rpm"

          echo "ðŸ“¦ Converting RPM to .tar.gz"
          rpm2archive "$rpm"
          tarball="${rpm%.rpm}.tar.gz"

          echo "ðŸ“¦ Extracting $tarball"
          tar -xf "$tarball" -C "$extract_dir"

      - name: Split into â‰¤200MB fragments
        id: set
        run: |
          cd workspace
          mkdir -p fragments
          deps_file="deps.json"
          touch "$deps_file"
          echo "[" > "$deps_file"

          rpm="${{ github.event.inputs.rpm }}"
          rpm_basename=$(basename "$rpm" .src.rpm)
          version=$(echo "$rpm_basename" | sed -E 's/^[^-]+-//')
          name=$(echo "$rpm_basename" | sed -E "s/-$version$//")
          timestamp=$(date +%s)
          i=1
          max_size=$((200 * 1024 * 1024))
          chunk_size=0
          frag_dir="${rpm_basename}-fragment-${i}-${timestamp}"
          mkdir -p "fragments/$frag_dir"

          find vendor -type f | while read file; do
            file_size=$(stat -c%s "$file")
            if [ $((chunk_size + file_size)) -gt $max_size ]; then
              echo "{\"name\": \"${name}-fragment-${i}-${timestamp}\", \"path\": \"fragments/$frag_dir\", \"version\": \"$version\"}," >> "$deps_file"
              i=$((i + 1))
              frag_dir="${rpm_basename}-fragment-${i}-${timestamp}"
              mkdir -p "fragments/$frag_dir"
              chunk_size=0
            fi

            rel_path="${file#vendor/}"
            mkdir -p "fragments/$frag_dir/$(dirname "$rel_path")"
            cp "$file" "fragments/$frag_dir/$rel_path"
            chunk_size=$((chunk_size + file_size))
          done

          if [ "$chunk_size" -gt 0 ]; then
            echo "{\"name\": \"${name}-fragment-${i}-${timestamp}\", \"path\": \"fragments/$frag_dir\", \"version\": \"$version\"}" >> "$deps_file"
          fi

          echo "]" >> "$deps_file"
          echo "::set-output name=fragments::$(cat $deps_file | jq -c '.')"

      - name: Upload fragments
        uses: actions/upload-artifact@v4
        with:
          name: extracted-fragments
          path: workspace/fragments

      - name: Upload fragment metadata
        uses: actions/upload-artifact@v4
        with:
          name: fossa-fragments-meta
          path: workspace/deps.json

  scan-fragments:
    needs: extract-and-split
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fragment: ${{ fromJson(needs.extract-and-split.outputs.fragments-json) }}
    name: Scan ${{ matrix.fragment.name }}
    steps:
      - name: Download fragment
        uses: actions/download-artifact@v4
        with:
          name: extracted-fragments
          path: fragments

      - name: Generate individual fossa-deps entry
        run: |
          mkdir -p deps
          cat <<EOF > deps/${{ matrix.fragment.name }}.yml
          - name: ${{ matrix.fragment.name }}
            path: ${matrix.fragment.path}
            version: ${{ matrix.fragment.version }}
          EOF

      - name: Upload fragment deps
        uses: actions/upload-artifact@v4
        with:
          name: fossa-deps-entries
          path: deps/*.yml

  merge-and-analyze:
    needs: scan-fragments
    runs-on: ubuntu-latest
    name: Merge & Analyze
    steps:
      - name: Download all deps
        uses: actions/download-artifact@v4
        with:
          name: fossa-deps-entries
          path: deps

      - name: Download fragments
        uses: actions/download-artifact@v4
        with:
          name: extracted-fragments
          path: fragments

      - name: Combine into fossa-deps.yml
        run: |
          echo "vendored-dependencies:" > fossa-deps.yml
          for f in deps/*.yml; do
            cat "$f" | sed 's/^/  /' >> fossa-deps.yml
          done
          cat fossa-deps.yml

      - name: Install FOSSA CLI
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa --version

      - name: Run FOSSA analyze
        run: |
          fossa analyze --debug

      - name: Upload fossa-deps.yml
        uses: actions/upload-artifact@v4
        with:
          name: final-fossa-deps
          path: fossa-deps.yml
